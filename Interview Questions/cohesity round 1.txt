// on disk - n-ary tree....
// nodes - metadata-{name, id, email address, size, address....}
// tree - entire
// subtree-
// search by name
// scale - 2 folds.... 100k children... 10k...
//

// UX
// APIs



1. /getDescendants/:nodeId/levels/{4} //tree structure of name and id
2. /getPath/:nodeId // [of nodeid +name meta from root to currentNode]
3. /getNodeDetails/:nodeId
4. /getMatchingNodes?filter=seachTerm [{name and id}]

// binary tree...
//.      1
//.   2.        3
// 4.      5. *      6
   **          7

// 12345*67
*     * *    3     *    *
           *   *
           *
// 1
   * 2
      3
       4
        5
         6

1*2*3*4*5*6#
//.       1
// 2.          3

// 100k - 50k - leaves-
// [0-9] - over http -- minimize the payload
//string -
// node: [ value:1, children: []
node: [1, childre]


1,2,3,4,5,*,*,*,3,*,6,*,*




function stringifyTree(rootNode){
    const queue = [rootNode];
    let strigified = '';
    while(queue.length){
        const pop = queue.pop();
        if(pop && pop.value){
            stringified+=pop.value;
            queue.push(pop.left || '*');
            queue.push(pop.right || '*');
        }else{
            strigified+=pop;
        }

    }
    return stringified;
}

function
